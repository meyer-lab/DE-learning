#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jun 30 14:53:07 2020

@author: zhangzhan
"""

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
import sys

def ODE(y,t,eps,w,t_mu,alpha):
    envelop_fn = np.tanh
    x = y
    dydt = eps * envelop_fn((np.dot(w,x)) + t_mu) - alpha * x
    return dydt

def solver(n_x,x0,eps,w,t_mu,alpha,dt=0.1,N_t=100):
    t = np.linspace(0,dt*N_t,N_t)
    sol = odeint(ODE,x0,t,args=(eps,w,t_mu,alpha))
    return t,sol

def graph(t,sol,n_x,index):
    fig = plt.figure(figsize=(100,300.0))
    for i in range(n_x):
        axes = fig.add_subplot(20,5,i+1)
        axes.plot(t,sol[:,i],'r',label=index[i])
        axes.set_title(index[i])
    plt.xlabel('t')
    plt.ylabel('log2-normalized relative change')
    fig.tight_layout()
    plt.savefig('./test/figures/test1.jpg')
    plt.show()
    
n_x = 99
#Initial values
x0=np.zeros(n_x)
# parameters come from the final training result
eps = np.loadtxt('./test/eps.params.csv',delimiter=',')
alpha = np.loadtxt('./test/alpha.params.csv',delimiter=',')
w = np.loadtxt('./test/W.params.csv',delimiter=',')
# here, i only introduce one of pertubation condition for setting t_mu
t_mu = np.loadtxt('./test/t_mu(1).csv',delimiter=',')
# all of the components(n_x = 99) involved 
index = np.loadtxt('./test/node_Index.csv', delimiter=',', dtype=str)

# run the ODE model
t, sol = solver(n_x,x0,eps,w,t_mu,alpha)
graph(t, sol, n_x, index)
